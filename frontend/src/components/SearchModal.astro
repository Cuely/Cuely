---
import Hero from "./Hero.astro";
---
<div
  class="modal-closed absolute flex h-fit w-52 origin-left flex-col items-center overflow-hidden rounded-lg border bg-white py-5 px-2 text-sm drop-shadow-md"
  id="modal"
>
  <div>
    <h2 class="w-fit text-center">
      Do you like results from <span id="modal-site-label">
        EXAMPLE.com
      </span>?
    </h2>
    <div class="flex space-x-1.5 pt-2 justify-center">
      <button
        class="rounded-full border bg-white px-2 py-2 hover:border-brand hover:text-brand"
        onclick="preferMore()"
        id="prefer-more"
      >
          <Hero class="w-4" icon="thumb-up" />
      </button>
      <button
        class="rounded-full border bg-white px-2 py-2 hover:border-amber-400 hover:text-amber-400"
        onclick="preferLess()"
        id="prefer-less"
      >
        <Hero class="w-4" icon="thumb-down" />
      </button>
      <button
        class="rounded-full border bg-white px-2 py-2 hover:border-red-500 hover:text-red-500"
        onclick="block()"
        id="prefer-block"
      >
        <Hero class="w-4" icon="ban" />
      </button>
    </div>
  </div>
  <div class="mt-4 flex justify-center">
    <button id="summarize-btn" onclick="summarizeBtn()">
      Summarize Result
    </button>
  </div>
</div>

<noscript>
  <style>
    #modal {
      visibility: hidden;
    }
  </style>
</noscript>

<style>
  #modal.modal-open {
    transition: transform 0.15s ease-in-out, left 0.15s ease-in-out,
      top 0.15s ease-in-out;
    transform: scale(1);
  }

  #prefer-more.selected {
    @apply border-brand text-brand;
  }

  #prefer-less.selected {
    @apply border-amber-400 text-amber-400;
  }

  #prefer-block.selected {
    @apply border-red-500 text-red-500;
  }

  #modal.modal-closed {
    transition: none !important;
    transform: scale(0);
  }

  #summarize-btn {
    @apply rounded-full px-2 py-1 border bg-white;
  }

  #summarize-btn:not(:disabled) {
    @apply hover:border-brand hover:text-brand;
  }

  #summarize-btn.active {
    @apply border-brand text-brand;
  }
</style>

<script is:inline>
  var rankingModal = document.getElementById("modal");
  var siteLabel = document.getElementById("modal-site-label");
  var btnPreferMore = document.getElementById("prefer-more");
  var btnPreferLess = document.getElementById("prefer-less");
  var btnPreferBlock = document.getElementById("prefer-block");
  var btnPreferBlock = document.getElementById("prefer-block");
  var btnSummarize = document.getElementById("summarize-btn");

  var currentSite = "";
  var currentUrl = "";
  var currentIdx = null;
  var currentHasCleanBody = false;

  const BLOCKED = 0;
  const LESS = 1;
  const MORE = 2;

  let rankings = JSON.parse(
    window.localStorage.getItem("sites-ranking-adjustment") || "{}"
  );

  rankingModal.addEventListener("click", (event) => {
    event.stopPropagation();
  });

  // This is called from search.astro
  // Do not delete!
  function updateModal(idx, site, url, hasCleanBody) {
    siteLabel.innerHTML = site;
    currentSite = site;
    currentUrl = url;
    currentIdx = idx;
    currentHasCleanBody = hasCleanBody;

    btnSummarize.disabled = !currentHasCleanBody;

    updateSelection();
    updateSummaryBtn();
  }

  function updateSummaryBtn() {
    var idx = parseInt(currentIdx);
    var snip = snippets[idx];

    if (snip["summaryShown"]) {
      if (!btnSummarize.classList.contains("active")) {
        btnSummarize.classList.add("active");
      }
    } else {
      if (btnSummarize.classList.contains("active")) {
        btnSummarize.classList.remove("active");
      }
    }
  }

  function updateSelection() {
    let rankings = JSON.parse(
      window.localStorage.getItem("sites-ranking-adjustment") || "{}"
    );

    btnPreferMore.classList.remove("selected");
    btnPreferLess.classList.remove("selected");
    btnPreferBlock.classList.remove("selected");

    if (rankings[currentSite] != undefined) {
      let pref = rankings[currentSite];

      if (pref == MORE) {
        btnPreferMore.classList.add("selected");
      } else if (pref == LESS) {
        btnPreferLess.classList.add("selected");
      } else if (pref == BLOCKED) {
        btnPreferBlock.classList.add("selected");
      }
    }
  }

  function setSitePreference(pref) {
    if (rankings[currentSite] == pref) {
      delete rankings[currentSite];
    } else {
      rankings[currentSite] = pref;
    }

    window.localStorage.setItem(
      "sites-ranking-adjustment",
      JSON.stringify(rankings)
    );

    updateSelection();
    document.getElementById("searchbar-form").submit();
  }

  // called from button
  function preferMore() {
    setSitePreference(MORE);
  }

  // called from button
  function preferLess() {
    setSitePreference(LESS);
  }

  // called from button
  function block() {
    setSitePreference(BLOCKED);
  }

  const allSnippetElements = document.getElementsByClassName("snippet");
  var snippets = {};

  for (let i = 0; i < allSnippetElements.length; i++) {
    const snip = allSnippetElements[i];
    const snipText = snip.querySelector(".snippet-text");
    if (snipText) {
      snippets[i] = {
        "origSnippet": snipText.innerHTML,
        "summaryShown": false,
        "summary": {
          "text": "",
          "hasStarted": false,
        }};
    }
  }

  // called from button
  function summarizeBtn() {
    if (currentIdx === null) {
      return;
    }

    var snippetElem = document.getElementById("snippet-" + currentIdx);

    if (snippetElem == null) {
      return;
    }
    var snippetText = snippetElem.querySelector(".snippet-text");
    var snippetBubble = snippetElem.querySelector(".chat-bubble");

    var idx = parseInt(currentIdx);
    var snip = snippets[idx];

    snip["summaryShown"] = !snip["summaryShown"];
    if (snip["summaryShown"]) {
      btnSummarize.classList.add("active");
      summarize(idx, snippetBubble, snippetText);
    } else {
      snippetBubble.classList.add("hidden");
      btnSummarize.classList.remove("active");

      snippetText.innerHTML = snip["origSnippet"];
    }

  }


  function summarize(idx, snippetBubble, snippetText) {
    var snip = snippets[idx];
    snippetText.innerHTML = snip['summary']["text"];

    var searchParams = new URLSearchParams(window.location.search);
    var query = searchParams.get("q");

    var reqData = {
        'query': query,
        'url': currentUrl,
      };

    var queryData = new URLSearchParams(reqData).toString();

    if (snip["summary"]["text"] == "") {
      snippetBubble.classList.remove("hidden");
    }

    if (!snip["summary"]["hasStarted"]) {
      snip["summary"]["hasStarted"] = true;

      fetch("/beta/api/summarize?" + queryData, {
        method: "GET",
      }).then((e) => {
        snippetBubble.classList.add("hidden");

        if (e.status != 200) {
          console.log("summarization error", e);
          snippetText.innerHTML = snip["origSnippet"];
          return;
        }

        return e.text();
      }).then((text) => {
        snip["summary"]["text"] = text;
        snippetText.innerHTML = snip["summary"]["text"];
      });
    }
  }
</script>
