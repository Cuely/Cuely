---
import Hero from "./Hero.astro";

export interface Props {
  autofocus?: boolean;
  query?: string;
}

const { autofocus, query } = Astro.props;
---

<style is:global>
  .suggestion-item {
    @apply hidden group-focus-within:flex group-focus-within:peer-placeholder-shown:hidden;
    @apply col-span-3 py-1.5 pl-5;
    @apply z-40;
  }
  .suggestion-item:nth-child(4) {
    @apply relative;
    @apply z-40;
  }
  .suggestion-item:nth-child(4)::before {
    @apply absolute inset-4 -top-px h-px bg-gray-200;
    @apply z-40;
    content: "";
  }
  .suggestion-item-hover {
    @apply cursor-pointer bg-gray-50;
  }
</style>

<form
  class="relative w-full"
  id="searchbar-form"
  method="GET"
  action="/search"
  autocomplete="off"
>
  <div class="h-10">
    <div
      id="searchbar"
      class="group absolute z-40 inset-x-0 top-0 grid grid-cols-[auto_1fr_auto] grid-rows-[2.5rem] rounded-3xl border bg-white transition-shadow focus-within:shadow"
    >
      <Hero
        class="col-[1/2] row-start-1 w-5 self-center ml-5 text-gray-400"
        icon="search"
      />
      <input
        type="text"
        value={query}
        autofocus={autofocus}
        name="q"
        class="searchbar-input peer inset-y-0 col-[1/3] row-start-1 flex h-full w-full grow border-none bg-transparent py-0 pl-12 outline-none focus:ring-0"
        placeholder="Search"
      />
      <div class="flex items-center justify-center p-[2px]">
        <button
          type="submit"
          class="rounded-full h-full px-2 md:px-5 bg-brand opacity-75 text-sm text-white hover:opacity-100 transition-colors duration-50"
          style="border: none"
          title="Search"
        >
          search
        </button>
      </div>
    </div>
  </div>

  <input type="hidden" value="" name="sr" id="siteRankingsUuid" />
  <input type="hidden" value="" name="ss" id="safeSearch" />
</form>

<script is:inline src="/js/lz-string.min.js"></script>
<script>
  const searchbar = document.querySelector("#searchbar")!;
  const searchbarForm: HTMLFormElement =
    document.querySelector("#searchbar-form")!;
  const siteRankingsUuid: HTMLInputElement =
    document.querySelector("#siteRankingsUuid")!;
  const safeSearch: HTMLInputElement =
    document.querySelector("#safeSearch")!;
  const searchbarInput: HTMLInputElement =
    document.querySelector(".searchbar-input")!;

  let suggestionItems = () =>
    Array.from(document.querySelectorAll(".suggestion-item")) as HTMLElement[];

  let currentHighlighted = -1;
  let currentSuggestions: string[] = [];
  let originalQuery = searchbarInput.value;

  function updateSuggestions(
    suggestionsData: { raw: string; highlighted: string }[]
  ) {
    suggestionItems().forEach((item) => item.remove());

    currentSuggestions = suggestionsData.map((item) => item.raw);
    currentHighlighted = -1;

    suggestionsData.forEach((item) => {
      const node = document.createElement("div");

      node.classList.add("flex");
      node.classList.add("suggestion-item");
      node.setAttribute("data-suggestion", item.raw);

      node.innerHTML = `
                <div class="flex w-4 mr-3 items-center">
                    <img class="h-5" loading="lazy" src="/images/search.svg" />
                </div>
                <div>
                    ${item.highlighted}
                </div>
            `.trim();

      searchbar.appendChild(node);
    });

    const items = suggestionItems();

    items.forEach((item) =>
      item.addEventListener("mousedown", (event) => {
        if (event.button == 0) handleSuggestionClick(event.target);
      })
    );

    items.forEach((item, idx) =>
      item.addEventListener("mouseenter", () => {
        currentHighlighted = idx;
        updateHighlighted(false);
      })
    );
  }

  function handleSuggestionClick(element: EventTarget | null) {
    if (element == null || !(element instanceof HTMLElement)) {
      return;
    }

    var suggestion = element.dataset.suggestion;

    if (suggestion == undefined) {
      handleSuggestionClick(element.parentElement);
      return;
    }

    searchbarInput.value = suggestion;

    var searchParams = new URLSearchParams(window.location.search);
    searchParams.set("q", suggestion);
    searchParams.set("p", "0");
    window.location.href = "/search?" + searchParams.toString();
  }

  function fetchAndUpdateSuggestions() {
    const q = searchbarInput.value;

    if (q == "") {
      return;
    }

    fetch(
      "/autosuggest?" +
        new URLSearchParams({
          q: q,
        })
    )
      .then((response) => response.json())
      .then((data) => updateSuggestions(data));
  }

  function updateHighlighted(updateInputField: boolean) {
    if (updateInputField) {
      if (currentHighlighted == -1) {
        searchbarInput.value = originalQuery;
      } else {
        searchbarInput.value = htmlDecode(
          currentSuggestions[currentHighlighted]
        );
      }
    }

    suggestionItems().forEach((item, idx) =>
      item.classList.toggle("suggestion-item-hover", idx == currentHighlighted)
    );
  }

  function handleUpKey(event: KeyboardEvent) {
    event.preventDefault();

    if (!searchbar.classList.contains("suggestions-visible")) {
      return;
    }

    if (currentHighlighted < 0) {
      currentHighlighted = currentSuggestions.length - 1;
    } else {
      currentHighlighted--;
    }
    updateHighlighted(true);
  }

  function handleDownKey(event: KeyboardEvent) {
    event.preventDefault();

    if (!searchbar.classList.contains("suggestions-visible")) {
      return;
    }

    if (currentHighlighted == currentSuggestions.length - 1) {
      currentHighlighted = -1;
    } else {
      currentHighlighted++;
    }

    updateHighlighted(true);
  }

  function handleArrowKeys(event: KeyboardEvent) {
    if (event.keyCode == 38) {
      handleUpKey(event);
    } else if (event.keyCode == 40) {
      handleDownKey(event);
    }
  }

  function htmlDecode(input: string) {
    var doc = new DOMParser().parseFromString(input, "text/html");
    return doc.documentElement.textContent || "";
  }

  searchbarInput.addEventListener("keydown", (event) => handleArrowKeys(event));

  searchbarInput.addEventListener("keyup", (event) => {
    if (event.keyCode == 38 || event.keyCode == 40) {
      return;
    }

    if (event.keyCode == 27) {
      searchbarInput.blur();
      searchbar.classList.remove("suggestions-visible");
      return;
    }

    originalQuery = searchbarInput.value;

    if (![16, 224, 18, 17, 27].includes(event.keyCode)) {
      searchbar.classList.add("suggestions-visible");
    }
    fetchAndUpdateSuggestions();
  });

  searchbarInput.addEventListener("focusin", () => {
    searchbar.classList.add("suggestions-visible");
    fetchAndUpdateSuggestions();
  });

  HTMLFormElement.prototype._submit = HTMLFormElement.prototype.submit;

  HTMLFormElement.prototype.submit = function () {
    this.dispatchEvent(
      new SubmitEvent("submit", {
        bubbles: true,
        cancelable: true,
      })
    );

    this._submit();
  };

  searchbarForm.addEventListener("submit", () => encodeClientData(), false);

  function encodeClientData() {
    encodeSiteRankings();
    encodeSafeSearch();
  }

  function encodeSiteRankings() {
    const BLOCKED = 0;
    const LESS = 1;
    const MORE = 2;

    let sites = JSON.parse(
      window.localStorage.getItem("sites-ranking-adjustment") || "{}"
    ) as Record<string, number>;

    let rankings = {
      liked: [] as string[],
      disliked: [] as string[],
      blocked: [] as string[],
    };

    for (const [site, ranking] of Object.entries(sites)) {
      if (ranking == MORE) {
        rankings.liked.push(site);
      } else if (ranking == LESS) {
        rankings.disliked.push(site);
      } else if (ranking == BLOCKED) {
        rankings.blocked.push(site);
      }
    }

    // @ts-ignore
    let compressed = LZString.compressToBase64(
      JSON.stringify(rankings)
    );

    siteRankingsUuid.value = compressed;
  }

  function encodeSafeSearch() {
    let safeSearchValue = window.localStorage.getItem("safeSearch") || "false";
    safeSearch.value = safeSearchValue;
  }
</script>
