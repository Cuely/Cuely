---
export interface Props {
  autofocus?: boolean;
  query?: string;
}

const { autofocus, query } = Astro.props;
---

<style is:global>
  .suggestion-item {
    @apply hidden group-focus-within:flex;
    @apply py-2 pl-5;
  }
  .suggestion-item:nth-child(2) {
    @apply relative;
  }
  .suggestion-item:nth-child(2)::before {
    @apply bg-gray-200 h-px absolute -top-px inset-4;
    content: "";
  }

  .suggestion-item-hover {
    @apply bg-gray-50 cursor-pointer;
  }
</style>

<form
  class="w-full md:max-w-2xl relative"
  method="GET"
  action="/search"
  autocomplete="off"
>
  <div class="h-12 relative">
    <div
      id="searchbar"
      class="absolute bg-white group top-0 flex flex-col border rounded-3xl inset-x-0 focus-within:shadow transition-shadow"
    >
      <div class="flex h-12 relative">
        <div
          class="flex ml-5 mr-1 self-center w-5 absolute pointer-events-none"
        >
          <img class="h-5" loading="lazy" src="/assets/images/search.svg" />
        </div>
        <input
          type="text"
          value={query}
          autofocus={autofocus}
          name="q"
          class="searchbar-input flex inset-y-0 w-full h-full grow focus:ring-0 pl-12"
          placeholder="Search"
          style="background-color: transparent; border: none; outline: none"
        />
        <div class="flex w-12 h-full justify-center items-center">
          <button
            type="submit"
            class="bg-transparent p-0 m-0"
            style="border: none"
          >
            <img
              loading="lazy"
              src="/assets/images/arrow.svg"
              class="h-5 cursor-pointer bg-transparent"
            />
          </button>
        </div>
      </div>
    </div>
  </div>
</form>

<script>
  const searchbar = document.querySelector("#searchbar")!;
  const suggestions = searchbar;
  const searchbarInput: HTMLInputElement =
    document.querySelector(".searchbar-input")!;
  let suggestionItems = () =>
    Array.from(document.querySelectorAll(".suggestion-item"));

  let currentHighlighted = -1;
  let currentSuggestions: string[] = [];
  let originalQuery =
    new URLSearchParams(window.location.search).get("q") || "";

  function updateSuggestions(
    suggestionsData: { raw: string; highlighted: string }[]
  ) {
    suggestionItems().forEach((item) => {
      item.remove();
    });

    currentSuggestions = suggestionsData.map((item) => item.raw);
    currentHighlighted = -1;

    suggestionsData.forEach((item) => {
      const node = document.createElement("div");

      // console.log(item);
      node.classList.add("flex");
      node.classList.add("suggestion-item");
      node.setAttribute("data-suggestion", item.raw);
      // console.log(node);

      node.innerHTML = `
                <div class="flex w-4 mr-3 items-center">
                    <img class="h-5" loading="lazy" src="/assets/images/search.svg" />
                </div>
                <div>
                    ${item.highlighted}
                </div>
            `.trim();

      suggestions.appendChild(node);
    });

    const items = suggestionItems();

    items.forEach((item) =>
      item.addEventListener("mousedown", (event) => {
        handleSuggestionClick(event.target);
      })
    );

    items.forEach((item, idx) =>
      item.addEventListener("mouseenter", () => {
        currentHighlighted = idx;
        updateHighlighted(false);
      })
    );
  }

  function handleSuggestionClick(element: EventTarget | null) {
    if (element == null || !(element instanceof HTMLElement)) {
      return;
    }

    var suggestion = element.dataset.suggestion;

    if (suggestion == undefined) {
      handleSuggestionClick(element.parentElement);
      return;
    }

    searchbarInput.value = suggestion;

    var searchParams = new URLSearchParams(window.location.search);
    searchParams.set("q", suggestion);
    searchParams.set("p", "0");
    window.location.href = "/search?" + searchParams.toString();
  }

  function fetchAndUpdateSuggestions() {
    const q = searchbarInput.value;

    // updateSuggestions([
    //   { raw: "sample", highlighted: "This is some sample text" },
    //   { raw: "sample", highlighted: "This is some sample text" },
    //   { raw: "sample", highlighted: "This is some sample text" },
    // ]);

    // return;

    if (q == "") {
      return;
    }

    fetch(
      "/autosuggest?" +
        new URLSearchParams({
          q: q,
        })
    )
      .then((response) => response.json())
      .then((data) => updateSuggestions(data));
  }

  function updateHighlighted(updateInputField: boolean) {
    if (updateInputField) {
      if (currentHighlighted == -1) {
        searchbarInput.value = originalQuery;
      } else {
        searchbarInput.value = htmlDecode(
          currentSuggestions[currentHighlighted]
        );
      }
    }

    suggestionItems().forEach((item, idx) =>
      item.classList.toggle("suggestion-item-hover", idx == currentHighlighted)
    );
  }

  function handleUpKey(event: KeyboardEvent) {
    event.preventDefault();

    if (!suggestions.classList.contains("suggestions-visible")) {
      return;
    }

    if (currentHighlighted < 0) {
      currentHighlighted = currentSuggestions.length - 1;
    } else {
      currentHighlighted--;
    }
    updateHighlighted(true);
  }

  function handleDownKey(event: KeyboardEvent) {
    event.preventDefault();

    if (!suggestions.classList.contains("suggestions-visible")) {
      return;
    }

    if (currentHighlighted == currentSuggestions.length - 1) {
      currentHighlighted = -1;
    } else {
      currentHighlighted++;
    }

    updateHighlighted(true);
  }

  function handleArrowKeys(event: KeyboardEvent) {
    if (event.keyCode == 38) {
      handleUpKey(event);
    } else if (event.keyCode == 40) {
      handleDownKey(event);
    }
  }

  function htmlDecode(input: string) {
    var doc = new DOMParser().parseFromString(input, "text/html");
    return doc.documentElement.textContent || "";
  }

  searchbarInput.addEventListener("keydown", (event) => handleArrowKeys(event));

  searchbarInput.addEventListener("keyup", (event) => {
    if (event.keyCode == 38 || event.keyCode == 40) {
      return;
    }

    if (event.keyCode == 27) {
      suggestions.classList.remove("suggestions-visible");
      searchbar.classList.remove("searchbar-suggestions-visible");
      return;
    }

    originalQuery = searchbarInput.value;

    if (![16, 224, 18, 17, 27].includes(event.keyCode)) {
      suggestions.classList.add("suggestions-visible");
      searchbar.classList.add("searchbar-suggestions-visible");
    }
    fetchAndUpdateSuggestions();
  });

  searchbarInput.addEventListener("focusin", () => {
    suggestions.classList.add("suggestions-visible");
    searchbar.classList.add("searchbar-suggestions-visible");
    fetchAndUpdateSuggestions();
  });
</script>
