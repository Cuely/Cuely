---
import Hero from "./Hero.astro";
import { askama } from "../askama";

export interface Props {
  snippet: string;
  index: string;
}
---

<div class="snippet">
  {
    askama.match("item.snippet", {
      "Snippet::Normal { date, text }": (
        <div class="line-clamp-3">
          {askama.if_("let Some(date) = date", () => (
            <span class="text-gray-500">{askama`date $ 2. May 2022`}</span>
          ))}
          <div id={"snippet-" + askama`loop.index0`}>
            <span id="snippet-text" class="[&:nth-child(2)]:before:content-['â€”'] snippet-text">
              {askama`text|safe $ {{lorem.lines}}`}
            </span>
            <div class="chat-bubble hidden">
              <div class="typing">
                <div class="dot"></div>
                <div class="dot"></div>
                <div class="dot"></div>
              </div>
            </div>
          </div>
        </div>
      ),
      "Snippet::StackOverflowQA { question, answers }": (
        <div>
          <div>
            <div class="max-h-16 line-clamp-3 overflow-hidden break-words">
              {askama.for_("part in question.body", () =>
                askama.match("part", {
                  "CodeOrText::Text(text)": <span>{askama`text`}</span>,
                  "CodeOrText::Code(code)": <span>{askama`code`}</span>,
                })
              )}
            </div>
          </div>
          <div class="flex space-x-2 text-sm mt-2">
            {askama.for_("answer in answers", () => (
              <a
                class="h-52 w-1/3 rounded-lg bg-slate-100 p-5 hover:cursor-pointer hover:bg-slate-600 hover:text-white hover:no-underline"
                href="{{ answer.url }}"
              >
                <div class="h-full w-full overflow-hidden">
                  <div class="mb-2 flex grow justify-between">
                    <div>{askama`answer.date`}</div>
                    <div class="flex space-x-2">
                      <div class="flex items-center space-x-1">
                        <span class="h-fit">{askama`answer.upvotes`}</span>
                        <div class="h-fit">
                          <Hero class="w-3" icon="thumb-up" />
                        </div>
                      </div>
                      {askama.if_("answer.accepted", () => (
                        <div>
                          <Hero class="w-5 text-green-500" icon="check" />
                        </div>
                      ))}
                    </div>
                  </div>
                  <div class="line-clamp-6">
                    {askama.for_("part in answer.body", () => (
                      <div class="select-none">
                        {askama.match("part", {
                          "CodeOrText::Text(text)": <span>{askama`text`}</span>,
                          "CodeOrText::Code(code)": (
                            <pre class="select-none">
                              <code
                                class="select-none rounded-lg"
                                style="background: none"
                              >{askama`code`}</code>
                            </pre>
                          ),
                        })}
                      </div>
                    ))}
                  </div>
                </div>
              </a>
            ))}
          </div>
        </div>
      ),
    })
  }
</div>

<style>
  .chat-bubble {
    padding-top: 5px;
    padding-left: 10px;
  }

  .typing {
    align-items: center;
    display: flex;
    height: 17px;
  }
  .typing .dot {
    animation: mercuryTypingAnimation 1.8s infinite ease-in-out;
    background-color: rgba(20, 105, 69, .7);
    border-radius: 50%;
    height: 7px;
    margin-right: 4px;
    vertical-align: middle;
    width: 7px;
  }
  .typing .dot:nth-child(1) {
    animation-delay: 200ms;
  }
  .typing .dot:nth-child(2) {
    animation-delay: 300ms;
  }
  .typing .dot:nth-child(3) {
    animation-delay: 400ms;
  }
  .typing .dot:last-child {
    margin-right: 0;
  }

  @keyframes mercuryTypingAnimation {
    0% {
      transform: translateY(0px);
      background-color:rgba(20, 105, 69, .7);
    }
    28% {
      transform: translateY(-7px);
      background-color:rgba(20, 105, 69, .4);
    }
    44% {
      transform: translateY(0px);
      background-color: rgba(20, 105, 69, .2);
    }
  }
</style>