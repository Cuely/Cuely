[package]
authors = ["Paul Masurel <paul.masurel@gmail.com>"]
categories = ["database-implementations", "data-structures"]
description = """Search engine library"""
documentation = "https://docs.rs/tantivy/"
edition = "2021"
exclude = ["benches/*.json", "benches/*.txt"]
homepage = "https://github.com/quickwit-oss/tantivy"
keywords = ["search", "information", "retrieval"]
license = "MIT"
name = "tantivy"
readme = "README.md"
repository = "https://github.com/quickwit-oss/tantivy"
rust-version = "1.63"
version = "0.23.0"

[dependencies]
aho-corasick = "1.0"
arc-swap = "1.5.0"
async-trait = "0.1"
base64 = "0.22.0"
bitpacking = {version = "0.9.2", default-features = false, features = [
  "bitpacker4x",
  "bitpacker1x",
]}
byteorder = "1.4.3"
census = "0.4.2"
crc32fast = "1.3.2"
crossbeam-channel = "0.5.4"
downcast-rs = "1.2.0"
fail = {version = "0.5.0", optional = true}
fastdivide = "0.4.0"
fnv = "1.0.7"
fs4 = {version = "0.8.0", optional = true}
futures-util = {version = "0.3.28", optional = true}
htmlescape = "0.3.1"
itertools = "0.13.0"
levenshtein_automata = "0.2.1"
log = "0.4.16"
lru = "0.12.0"
lz4_flex = {version = "0.11", default-features = false, optional = true}
measure_time = "0.8.2"
memmap2 = {version = "0.9.0", optional = true}
murmurhash32 = "0.3"
nom = "7"
once_cell = "1.10.0"
oneshot = "0.1.7"
ownedbytes.workspace = true
rayon = "1.5.2"
regex = {version = "1.5.5", default-features = false, features = [
  "std",
  "unicode",
]}
rust-stemmers = "1.2.0"
rustc-hash = "1.1.0"
serde = {version = "1.0.136", features = ["derive"]}
serde_json = "1.0.79"
sketches-ddsketch = {version = "0.3.0", features = ["use_serde"]}
smallvec = "1.8.0"
tantivy-fst = "0.5"
tempfile = {version = "3.3.0", optional = true}
thiserror = "1.0.30"
time = {version = "0.3.10", features = ["serde-well-known"]}
uuid = {version = "1.0.0", features = ["v4", "serde"]}
zstd = {version = "0.13", features = ["experimental"]}

[target.'cfg(windows)'.dependencies]
winapi = "0.3.9"

[dev-dependencies]
binggan = "0.8.0"
futures = "0.3.21"
maplit = "1.0.2"
matches = "0.1.9"
more-asserts = "0.3.1"
paste = "1.0.11"
postcard = {version = "1.0.4", features = [
  "use-std",
], default-features = false}
pretty_assertions = "1.2.1"
proptest = "1.0.0"
rand = "0.8.5"
rand_distr = "0.4.3"
test-log = "0.2.10"
time = {version = "0.3.10", features = ["serde-well-known", "macros"]}
zipf = "7.0.0"

[target.'cfg(not(windows))'.dev-dependencies]
criterion = {version = "0.5", default-features = false}

[dev-dependencies.fail]
features = ["failpoints"]
version = "0.5.0"

[features]
default = ["mmap", "stopwords", "lz4-compression"]
mmap = ["fs4", "tempfile", "memmap2"]
stopwords = []

lz4-compression = ["lz4_flex"]

failpoints = ["fail", "fail/failpoints"]
unstable = [] # useful for benches.

quickwit = ["futures-util"]

# Following the "fail" crate best practises, we isolate
# tests that define specific behavior in fail check points
# in a different binary.
#
# We do that because, fail rely on a global definition of
# failpoints behavior and hence, it is incompatible with
# multithreading.
[[test]]
name = "failpoints"
path = "tests/failpoints/mod.rs"
required-features = ["failpoints"]
